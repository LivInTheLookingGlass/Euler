C Implementation of Problem 12
==============================

View source code :source:`c/src/p0012.c`

.. note::

   While this is a complete solution, and will eventually complete, until :c:struct:`prime_counter` utilizes the prime sieve
   (as opposed to the current implementation that searches naively with a cache) it will be quite slow. That conversion is underway.

Includes
--------

- `"factors.h" <./lib/factors.html>`__
- `"macros.h" <./macros.html>`__ (implicitly, via factors.h)
- `"math.h" <./math.html>`__ (implicitly, via factors.h & if compiled on PCC)
- :external:c:type:`inttypes`
- :external:c:type:`stdint`
- :external:c:type:`stdio`
- :external:c:type:`stdlib` (implicitly, via factors.h & if not compiled on PCC)
- :external:c:type:`math` (implicitly, via factors.h & if not compiled on PCC)
- :external:c:type:`stdbool` (implicitly, via factors.h)

Solution
--------

.. c:namespace-push:: p0012

.. c:function:: uint64_t p0012()

.. c:function:: int main(int argc, char const *argv[])

   .. note:: 
      
      This function is only present in the Python test runner, or when compiling as a standalone program.
      It is not present when compiling for the Unity test runner.

.. literalinclude:: ../../../c/src/p0012.c
   :language: C
   :linenos:

.. tags:: c-iterator, divisor-count, divisibility, marked-slow
