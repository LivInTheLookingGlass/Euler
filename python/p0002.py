"""
Project Euler Problem 2

I also decided that I like lazy functions on this one. Also seen: generator
comprehensions

Revision 1:

I split fib() up so that there is one version which limits and another which
does not.

Revision 2:

Utilize the underlying pattern of the sequence to avoid needing modulo division,
speeding up by ~2x.

Revision 3:

Revise fib() to be consistent with fib_by_3(). Now both iterate starting from 0.

Problem:

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

"""
import itertools
from typing import Iterator


def fib() -> Iterator[int]:
    """This generator goes through the fibonacci sequence"""
    a, b = 0, 1
    yield a
    while True:
        yield b
        a, b = b, a + b


def fib_by_3(start_index: int = 0) -> Iterator[int]:
    """This generator goes through the fibonacci sequence skipping by 3s. This works because:
    F[n] = F[n-1]          + F[n-2]
    F[n] = F[n-2] + F[n-3] + F[n-2]
    F[n] = 2 * F[n-2]            + F[n-3]
    F[n] = 2 * (F[n-3] + F[n-4]) + F[n-3]
    F[n] = 3 * F[n-3] + 2 * F[n-4]
    F[n] = 3 * F[n-3] + F[n-4] + F[n-5] + F[n-6]
    F[n] = 4 * F[n-3]                   + F[n-6]
    """
    orig = fib()
    for _ in range(start_index):
        next(orig)
    a = next(orig)  # F[n-6]
    next(orig)
    next(orig)
    b = next(orig)  # F[n-3]
    del orig
    yield a
    while True:
        yield b
        a, b = b, a + b * 4


def main() -> int:
    return sum(itertools.takewhile((4_000_000).__gt__, fib_by_3()))  # this works because every third value is even


if __name__ == '__main__':
    print(main())
